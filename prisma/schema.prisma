// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(uuid())
  username      String    @unique
  email         String    @unique
  password_hash String
  avatar_url    String?
  provider      String    @default("email")
  created_at    DateTime  @default(now())
  updated_at    DateTime  @updatedAt
  songs         Song[]
  favorites     UserFavorite[]
}

model Song {
  id              Int           @id @default(autoincrement())
  title           String
  slug            String        @unique
  lyrics_chords   String        @db.Text
  original_key    String?
  rhythm          String?
  tempo           Int?
  views           Int           @default(0)
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  
  composer_id     Int?
  composer        Composer?     @relation(fields: [composer_id], references: [id])
  
  author_id       String
  author          User          @relation(fields: [author_id], references: [id])

  genres          SongGenre[]
  artists         SongArtist[]
  favoritedBy     UserFavorite[]
}

model Composer {
  id           Int      @id @default(autoincrement())
  name         String   @unique
  // === DÒNG MỚI ĐƯỢC THÊM VÀO ===
  search_name  String   // Trường mới để tìm kiếm không dấu
  // ==============================
  slug         String   @unique
  bio          String?  @db.Text
  image_url    String?
  songs        Song[]
}

model Artist {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  bio       String?  @db.Text
  image_url String?
  songs     SongArtist[]
}

model Genre {
  id           Int           @id @default(autoincrement())
  name         String        @unique
  slug         String        @unique
  description  String?
  songs        SongGenre[]
}

model SongGenre {
  song_id  Int
  genre_id Int
  song     Song   @relation(fields: [song_id], references: [id], onDelete: Cascade)
  genre    Genre  @relation(fields: [genre_id], references: [id], onDelete: Cascade)

  @@id([song_id, genre_id])
}

model SongArtist {
  song_id   Int
  artist_id Int
  song      Song   @relation(fields: [song_id], references: [id], onDelete: Cascade)
  artist    Artist @relation(fields: [artist_id], references: [id], onDelete: Cascade)

  @@id([song_id, artist_id])
}

model UserFavorite {
  user_id   String
  song_id   Int
  added_at  DateTime @default(now())
  user      User     @relation(fields: [user_id], references: [id], onDelete: Cascade)
  song      Song     @relation(fields: [song_id], references: [id], onDelete: Cascade)

  @@id([user_id, song_id])
}