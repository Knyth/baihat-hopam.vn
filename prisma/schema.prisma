// prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Song {
  id           Int      @id @default(autoincrement())
  title        String
  slug         String   @unique
  lyricsChords String   @map("lyrics_chords")
  originalKey  String?  @map("original_key")
  rhythm       String?
  tempo        Int?
  views        Int      @default(0)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  composerId   Int?     @map("composer_id")
  composer     Composer? @relation(fields: [composerId], references: [id])

  authorId     String?  @map("author_id")
  author       User?    @relation("ContributedSongs", fields: [authorId], references: [id])

  artists      SongArtist[]
  genres       SongGenre[]
  favoritedBy  UserFavorite[]

  // NEW: quan hệ với bảng sự kiện view
  viewEvents   SongView[]

  @@map("songs")
}

model Artist {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  slug      String   @unique
  bio       String?
  imageUrl  String?  @map("image_url")

  songs     SongArtist[]

  @@map("artists")
}

model Composer {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  search_name String
  description String?
  bio         String?
  imageUrl    String?  @map("image_url")

  songs       Song[]

  // ✅ NEW: cờ nổi bật cho Homepage
  featured    Boolean  @default(false)

  @@index([featured, name])
  @@map("composers")
}

model Genre {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  slug        String   @unique
  description String?

  songs       SongGenre[]

  // ✅ NEW: cờ nổi bật cho Homepage
  featured    Boolean  @default(false)

  @@index([featured, name])
  @@map("genres")
}

model SongArtist {
  songId    Int    @map("song_id")
  artistId  Int    @map("artist_id")
  song      Song   @relation(fields: [songId], references: [id], onDelete: Cascade)
  artist    Artist @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@id([songId, artistId])
  @@map("song_artists")
}

model SongGenre {
  songId   Int   @map("song_id")
  genreId  Int   @map("genre_id")
  song     Song  @relation(fields: [songId], references: [id], onDelete: Cascade)
  genre    Genre @relation(fields: [genreId], references: [id], onDelete: Cascade)

  @@id([songId, genreId])
  @@map("song_genres")
}

model UserFavorite {
  userId   String   @map("user_id")
  songId   Int      @map("song_id")
  addedAt  DateTime @default(now()) @map("added_at")
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  song     Song     @relation(fields: [songId], references: [id], onDelete: Cascade)

  @@id([userId, songId])
  @@map("user_favorites")
}

model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id")
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  password_hash String?
  image         String?

  accounts      Account[]
  sessions      Session[]
  favorites     UserFavorite[]
  contributed   Song[]         @relation("ContributedSongs")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

/* ====================== NEW MODEL ======================
   Ghi nhận các sự kiện view (ẩn danh) để tổng hợp 7 ngày gần nhất.
   - fingerprint: mã ẩn danh cho visitor (UUID từ localStorage, đã hash)
   - bucketStart: neo theo block 8 giờ để chống spam (mỗi visitor x song x bucket chỉ tính 1 lần)
*/
model SongView {
  id          Int      @id @default(autoincrement())
  songId      Int      @map("song_id")
  song        Song     @relation(fields: [songId], references: [id], onDelete: Cascade)
  fingerprint String   @db.VarChar(64)
  bucketStart DateTime @map("bucket_start")
  viewedAt    DateTime @default(now()) @map("viewed_at")

  @@unique([songId, fingerprint, bucketStart])
  @@index([viewedAt])
  @@map("song_views")
}
