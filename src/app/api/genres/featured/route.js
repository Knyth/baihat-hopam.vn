// src/app/api/genres/featured/route.js
import { NextResponse } from "next/server";
import prisma from "@/lib/prisma";

// Lu√¥n tr·∫£ d·ªØ li·ªáu t∆∞∆°i trong dev / kh√¥ng d√≠nh cache ISR
export const dynamic = "force-dynamic";

/**
 * GET /api/genres/featured?limit=12
 * Chu·∫©n tr·∫£ v·ªÅ:
 * [
 *   { name: "Nh·∫°c Tr·ªãnh", slug: "nhac-trinh" },
 *   { name: "Ballad", slug: "ballad" },
 *   ...
 * ]
 */
export async function GET(request) {
  try {
    const { searchParams } = new URL(request.url);
    const limitParam = Number(searchParams.get("limit"));
    const limit = Number.isFinite(limitParam) && limitParam > 0 ? limitParam : 12;

    // ‚öôÔ∏è Chi·∫øn l∆∞·ª£c ch·ªçn "featured":
    // 1) N·∫øu DB c·ªßa b·∫°n c√≥ c·ªù `featured` trong b·∫£ng Genre ‚áí ∆∞u ti√™n d√πng.
    // 2) N·∫øu kh√¥ng c√≥ c·ªù, fallback: l·∫•y c√°c th·ªÉ lo·∫°i c√≥ √≠t nh·∫•t 1 b√†i, ∆∞u ti√™n nhi·ªÅu b√†i tr∆∞·ªõc.
    //
    // ƒê·ªÉ kh√¥ng ph·ª• thu·ªôc schema, m√¨nh vi·∫øt fallback an to√†n b·∫±ng relation count.
    // N·∫øu b·∫°n c√≥ c·ªù `featured: true`, ch·ªâ c·∫ßn b·ªè "orderBy" & "where" ·ªü d∆∞·ªõi v√† thay nh∆∞ comment.
    const genres = await prisma.genre.findMany({
      // üëâ N·∫øu c√≥ c·ªù:
      // where: { featured: true },
      take: limit,
      orderBy: [
        // ∆Øu ti√™n s·ªë b√†i h√°t nhi·ªÅu h∆°n (n·∫øu c√≥ relation songs)
        { songs: { _count: "desc" } },
        // Sau ƒë√≥ s·∫Øp x·∫øp t√™n cho ·ªïn ƒë·ªãnh
        { name: "asc" },
      ],
      select: {
        name: true,
        slug: true,
        // Tr√°nh select field kh√¥ng t·ªìn t·∫°i ƒë·ªÉ kh√¥ng d√≠nh l·ªói Unknown field
        // N·∫øu b·∫°n c√≥ iconUrl, c√≥ th·ªÉ b·∫≠t:
        // iconUrl: true,
        // _count: { select: { songs: true } }, // b·∫≠t khi mu·ªën xem s·ªë b√†i
      },
      // where: { songs: { some: {} } }, // N·∫øu mu·ªën l·ªçc ch·ªâ genre c√≥ √≠t nh·∫•t 1 b√†i
    });

    // Chu·∫©n ho√° d·ªØ li·ªáu: ch·ªâ name/slug (ƒë·ªß cho FE hi·ªán t·∫°i)
    const data = (genres || []).map((g) => ({
      name: g.name,
      slug: g.slug,
      // Gi·ªØ ch·ªó n·∫øu sau n√†y c·∫ßn icon:
      // iconUrl: g.iconUrl ?? null,
      // icon_url: g.iconUrl ?? null, // backward-compatible n·∫øu FE c≈©
    }));

    return NextResponse.json(data, { status: 200 });
  } catch (err) {
    console.error("GET /api/genres/featured failed:", err);
    return NextResponse.json({ error: "Failed to load featured genres" }, { status: 500 });
  }
}
