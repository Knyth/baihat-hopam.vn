// src/app/songs/page.js
// ‚úÖ Trang danh s√°ch b√†i h√°t (Library / Trending)
// - Kh√¥ng ƒë·ªïi UI hi·ªán t·∫°i: v·∫´n render <SongListContainer /> nh∆∞ tr∆∞·ªõc.
// - Th√™m generateMetadata ƒë·ªÉ SEO t·ªët h∆°n khi sort=trending.
// - Gi·ªØ c·∫•u h√¨nh ƒë·ªông an to√†n cho CSR/filters.

export const dynamic = "force-dynamic";  // lu√¥n render ƒë·ªông v√¨ c√≥ filter/searchParams
export const revalidate = 0;             // kh√¥ng cache ƒë·ªÉ list theo real-time

import { getAllGenres } from "@/lib/api";
import SongListContainer from "@/components/SongListContainer";

/**
 * üß† SEO: sinh metadata theo query
 * Next.js 15: params l√† Promise; searchParams c√≥ th·ªÉ l√† object ho·∫∑c (t√πy version) c≈©ng l√† Promise.
 * Ta lu√¥n "await" ƒë·ªÉ an to√†n.
 */
export async function generateMetadata({ searchParams }) {
  const sp = (await searchParams) || {};
  const sort = String(sp.sort || "newest");  // trending | newest | ...
  const daysParam = Number(sp.days);
  const days = Number.isFinite(daysParam) ? Math.min(Math.max(daysParam, 1), 30) : 7;

  // Base d·ªØ li·ªáu SEO
  const SITE_NAME = "baihat-hopam.vn";
  const SITE_URL =
    process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000";

  // M·∫∑c ƒë·ªãnh cho th∆∞ vi·ªán
  let title = `Th∆∞ vi·ªán H·ª£p √¢m | ${SITE_NAME}`;
  let description =
    "Kh√°m ph√° h·ª£p √¢m v√† l·ªùi b√†i h√°t Vi·ªát, ƒë∆∞·ª£c c·ªông ƒë·ªìng c·∫≠p nh·∫≠t li√™n t·ª•c t·∫°i baihat-hopam.vn.";
  let canonicalPath = "/songs";

  // Khi l√† trang Th·ªãnh h√†nh
  if (sort === "trending") {
    title = `Th·ªãnh h√†nh ‚Äì Top b√†i h√°t ${days} ng√†y | ${SITE_NAME}`;
    description = `Danh s√°ch th·ªãnh h√†nh: c√°c b√†i h√°t ƒë∆∞·ª£c xem nhi·ªÅu nh·∫•t trong ${days} ng√†y g·∫ßn ƒë√¢y tr√™n ${SITE_NAME}.`;
    canonicalPath = "/songs?sort=trending";
    if (days !== 7) {
      // N·∫øu ng∆∞·ªùi d√πng b·∫≠t m·ªëc kh√°c (vd 30 ng√†y) th√¨ canonical g·ªìm c·∫£ days
      canonicalPath = `/songs?sort=trending&days=${days}`;
    }
  }

  const canonical = `${SITE_URL}${canonicalPath}`;

  return {
    title,
    description,
    alternates: { canonical },
    robots: { index: true, follow: true },
    openGraph: {
      type: "website",
      url: canonical,
      siteName: SITE_NAME,
      title,
      description,
    },
    twitter: {
      card: "summary_large_image",
      title,
      description,
    },
  };
}

/**
 * üñ•Ô∏è Page (Server Component)
 * - L·∫•y list genres qua API helper s·∫µn c√≥ ƒë·ªÉ cung c·∫•p cho FilterSidebar.
 * - UI/logic ph·∫ßn list/paging n·∫±m trong <SongListContainer/>.
 */
export default async function SongsPage({ searchParams }) {
  // (gi·ªØ l·∫°i await cho t∆∞∆°ng th√≠ch Next 15, d√π kh√¥ng d√πng tr·ª±c ti·∫øp)
  await searchParams;

  // L·∫•y genres (n·∫øu API n·ªôi b·ªô ch∆∞a c√≥ d·ªØ li·ªáu th√¨ component v·∫´n t·ª± x·ª≠ l√Ω gracefully)
  const genres = await getAllGenres();

  return <SongListContainer genres={genres} />;
}
