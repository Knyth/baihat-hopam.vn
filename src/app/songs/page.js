// src/app/songs/page.js
// ‚úÖ Trang danh s√°ch b√†i h√°t (Library / Trending)
// - Gi·ªØ nguy√™n UI: render <SongListContainer />.
// - ƒê√É c√≥ generateMetadata (title/description/canonical/OG/Twitter).
// - NEW: Nh√∫ng Structured Data (JSON-LD) d·∫°ng ItemList khi sort=trending.
// - Kh√¥ng ƒë·ª•ng Header/Hero/Recently Added/Footer/globals.css.

export const dynamic = "force-dynamic";
export const revalidate = 0;

import { getAllGenres } from "@/lib/api";
import SongListContainer from "@/components/SongListContainer";

// === NEW: d√πng Prisma ƒë·ªÉ l·∫•y danh s√°ch trending cho JSON-LD (server-side)
import prisma from "@/lib/prisma";
import TrendingJsonLd from "@/components/seo/TrendingJsonLd";

/**
 * üß† SEO: sinh metadata theo query
 */
export async function generateMetadata({ searchParams }) {
  const sp = (await searchParams) || {};
  const sort = String(sp.sort || "newest");
  const daysParam = Number(sp.days);
  const days = Number.isFinite(daysParam) ? Math.min(Math.max(daysParam, 1), 30) : 7;

  const SITE_NAME = "baihat-hopam.vn";
  const SITE_URL = process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000";

  let title = `Th∆∞ vi·ªán H·ª£p √¢m | ${SITE_NAME}`;
  let description =
    "Kh√°m ph√° h·ª£p √¢m v√† l·ªùi b√†i h√°t Vi·ªát, ƒë∆∞·ª£c c·ªông ƒë·ªìng c·∫≠p nh·∫≠t li√™n t·ª•c t·∫°i baihat-hopam.vn.";
  let canonicalPath = "/songs";

  if (sort === "trending") {
    title = `Th·ªãnh h√†nh ‚Äì Top b√†i h√°t ${days} ng√†y | ${SITE_NAME}`;
    description = `Danh s√°ch th·ªãnh h√†nh: c√°c b√†i h√°t ƒë∆∞·ª£c xem nhi·ªÅu nh·∫•t trong ${days} ng√†y g·∫ßn ƒë√¢y tr√™n ${SITE_NAME}.`;
    canonicalPath = days === 7 ? "/songs?sort=trending" : `/songs?sort=trending&days=${days}`;
  }

  const canonical = `${SITE_URL}${canonicalPath}`;

  return {
    title,
    description,
    alternates: { canonical },
    robots: { index: true, follow: true },
    openGraph: {
      type: "website",
      url: canonical,
      siteName: SITE_NAME,
      title,
      description,
    },
    twitter: {
      card: "summary_large_image",
      title,
      description,
    },
  };
}

/**
 * Helper: L·∫•y 10 b√†i "th·ªãnh h√†nh" cho JSON-LD (7 ng√†y + fallback all-time)
 * - Ch·ªâ select slug/title ƒë·ªÉ nh·∫π.
 */
async function getTrendingForJsonLd(days = 7, take = 10) {
  const since = new Date(Date.now() - days * 24 * 60 * 60 * 1000);
  const select = { id: true, slug: true, title: true };

  // 1) Trong c·ª≠a s·ªï X ng√†y
  const inWindow = await prisma.song.findMany({
    where: { createdAt: { gte: since } },
    orderBy: [{ views: "desc" }, { updatedAt: "desc" }],
    take,
    select,
  });

  let songs = inWindow;

  // 2) Fallback all-time n·∫øu ch∆∞a ƒë·ªß (tr√°nh tr√πng)
  if (songs.length < take) {
    const needed = take - songs.length;
    const excludeIds = songs.map((s) => s.id);
    const fillers = await prisma.song.findMany({
      where: excludeIds.length ? { id: { notIn: excludeIds } } : {},
      orderBy: [{ views: "desc" }, { updatedAt: "desc" }],
      take: needed,
      select,
    });
    songs = [...songs, ...fillers];
  }

  return songs.map((s) => ({ slug: s.slug, title: s.title }));
}

/**
 * üñ•Ô∏è Page (Server Component)
 */
export default async function SongsPage({ searchParams }) {
  const sp = (await searchParams) || {};
  const sort = String(sp.sort || "newest");
  const daysParam = Number(sp.days);
  const days = Number.isFinite(daysParam) ? Math.min(Math.max(daysParam, 1), 30) : 7;

  // L·∫•y genres cho sidebar (trang trending s·∫Ω t·ª± ·∫©n sidebar trong SongListContainer)
  const genres = await getAllGenres();

  // === NEW: JSON-LD cho sort=trending
  let jsonLdItems = [];
  if (sort === "trending") {
    jsonLdItems = await getTrendingForJsonLd(days, 10);
  }

  const SITE_URL = process.env.NEXT_PUBLIC_SITE_URL || "http://localhost:3000";

  return (
    <>
      {/* JSON-LD ch·ªâ render khi trending (kh√¥ng ch·∫°m t·ªõi layout/UI) */}
      {sort === "trending" && <TrendingJsonLd items={jsonLdItems} baseUrl={SITE_URL} days={days} />}

      {/* UI danh s√°ch gi·ªØ nguy√™n */}
      <SongListContainer genres={genres} />
    </>
  );
}
