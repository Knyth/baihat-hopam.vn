// src/components/MySongsClient.js
"use client";

import { useState } from "react";
import Link from "next/link";
import toast from "react-hot-toast";

// Component con ƒë·ªÉ render m·ªôt b√†i h√°t trong danh s√°ch
function FavoriteSongItem({ song, onRemove }) {
  const handleRemove = () => {
    // G·ªçi h√†m onRemove ƒë∆∞·ª£c truy·ªÅn t·ª´ component cha v·ªõi ID c·ªßa b√†i h√°t
    onRemove(song.id);
  };

  return (
    <div className="favorite-song-item">
      <div className="song-info">
        <Link href={`/songs/${song.slug}`} className="song-title-link">
          {song.title}
        </Link>
        <p className="song-composer">{song.composer ? song.composer.name : "Kh√¥ng r√µ"}</p>
      </div>
      <button onClick={handleRemove} className="remove-button" title="X√≥a kh·ªèi danh s√°ch">
        üóëÔ∏è
      </button>
    </div>
  );
}

// Component ch√≠nh c·ªßa trang
export default function MySongsClient({ initialSongs }) {
  // Qu·∫£n l√Ω danh s√°ch b√†i h√°t b·∫±ng state ƒë·ªÉ c√≥ th·ªÉ c·∫≠p nh·∫≠t giao di·ªán
  const [songs, setSongs] = useState(initialSongs);

  const handleRemoveSong = async (songId) => {
    // 1. C·∫≠p nh·∫≠t giao di·ªán ngay l·∫≠p t·ª©c (Optimistic Update)
    // L·ªçc ra b√†i h√°t c√≥ id tr√πng kh·ªõp v√† t·∫°o m·ªôt m·∫£ng m·ªõi
    const updatedSongs = songs.filter((song) => song.id !== songId);
    setSongs(updatedSongs);

    // 2. Hi·ªÉn th·ªã th√¥ng b√°o
    toast("ƒê√£ x√≥a b√†i h√°t.", { icon: "üóëÔ∏è" });

    // 3. G·ªçi API ƒë·ªÉ x√≥a th·∫≠t trong database
    const res = await fetch(`/api/user/favorites/${songId}`, {
      method: "DELETE",
    });

    // 4. N·∫øu API b√°o l·ªói, ho√†n t√°c l·∫°i thay ƒë·ªïi tr√™n giao di·ªán
    if (!res.ok) {
      setSongs(songs); // Tr·∫£ l·∫°i danh s√°ch c≈©
      toast.error("C√≥ l·ªói x·∫£y ra, kh√¥ng th·ªÉ x√≥a b√†i h√°t.");
    }
  };

  // N·∫øu kh√¥ng c√≥ b√†i h√°t n√†o, hi·ªÉn th·ªã tr·∫°ng th√°i tr·ªëng
  if (songs.length === 0) {
    return (
      <div className="empty-state-container">
        <h2>Danh s√°ch c·ªßa b·∫°n ch∆∞a c√≥ g√¨ c·∫£!</h2>
        <p>
          H√£y b·∫Øt ƒë·∫ßu kh√°m ph√° v√† nh·∫•n v√†o bi·ªÉu t∆∞·ª£ng ‚ù§Ô∏è t·∫°i b·∫•t k·ª≥ b√†i h√°t n√†o b·∫°n th√≠ch ƒë·ªÉ l∆∞u l·∫°i
          ƒë√¢y nh√©.
        </p>
        <Link href="/songs" className="cta-button">
          Kh√°m ph√° b√†i h√°t ngay
        </Link>
      </div>
    );
  }

  // N·∫øu c√≥ b√†i h√°t, hi·ªÉn th·ªã danh s√°ch
  return (
    <div className="favorites-list-container">
      {songs.map((song) => (
        <FavoriteSongItem key={song.id} song={song} onRemove={handleRemoveSong} />
      ))}
    </div>
  );
}
